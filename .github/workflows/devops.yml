# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Roman translator CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

#     steps:
#     - uses: actions/checkout@v3
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'
#     - run: npm ci
#     - run: npm run build --if-present
#     - run: npm test
    steps:
      - uses: actions/checkout@v2
      - uses: borales/actions-yarn@v2.3.0
        with:
          cmd: install # will run `yarn install` command
#       - uses: borales/actions-yarn@v2.3.0
#         with:
#           cmd: build # will run `yarn build` command
      - uses: borales/actions-yarn@v2.3.0
        with:
          cmd: test # will run `yarn test` command
      - name: Configure AWS credentials 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1   
      - name: Build and tag image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Test image
        id: test-image
        env:
          IMAGE_NAME: ${{ steps.build-image.outputs.image }}
        run: |
          docker run --rm $IMAGE_NAME test  
      - name: Push image to Amazon ECR
        id: push-image
        if: github.ref == 'refs/heads/main'
        env:
          IMAGE_NAME: ${{ steps.build-image.outputs.image }}
        run: |
          docker push $IMAGE_NAME  
      - name: Render Amazon ECS task definition
        id: render-web-container
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: web-server
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: "LOG_LEVEL=info"

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        if: github.ref == 'refs/heads/main'
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: web-server-service
          cluster: my-cluster
          wait-for-service-stability: true
